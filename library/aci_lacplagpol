#!/usr/bin/python

import socket
# disable insecure requests warnings in requests
import requests
from re import compile
from requests.packages.urllib3.exceptions import InsecureRequestWarning

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

try:
    HAS_COBRA = True
    from cobra.mit.access import MoDirectory
    from cobra.mit.session import LoginSession
    from cobra.mit.request import ConfigRequest
    from cobra.mit.request import DnQuery
    from cobra.model.fabric import HIfPol
    from cobra.model.pol import Uni
    from cobra.model.infra import Infra
    from cobra.model.lacp import LagPol
    from cobra.internal.codec.xmlcodec import toXMLStr
except ImportError as ie:
    HAS_COBRA = False


KEY_MAP = {
    'name': 'name',
    'suspend':'susp-individual',
    'graceful':'graceful-conv',
    'load_defer':'load-defer',
    'fast':'fast-sel-hot-stdby',
    'mode':'mode',
    'ctrl':'ctrl',
    'max':'maxLinks',
    'min':'minLinks',
    'descr':'descr'
}


def get_lacp_params(mo):
    params = ['suspend', 'graceful', 'load_defer', 'fast']
    values = getattr(mo, 'ctrl').split(",")
    resource = {}
    for param in params:
        if KEY_MAP[param] in values:
            resource[param] = 'enabled'
        else:
            resource[param] = 'disabled'
    return resource


def get_attributes(keymap, mo):
    resource = {}
    lacp_keys = ['suspend', 'graceful', 'load_defer', 'fast']
    if mo:
        for mine, cobra in keymap.iteritems():
            if mine not in lacp_keys:
                if mine == 'ctrl':
                    resource.update(get_lacp_params(mo))
                elif mine == 'max':
                    value = int(getattr(mo, cobra))
                    if value:
                        resource[mine] = value
                elif mine == 'min':
                    value = int(getattr(mo, cobra))
                    if value:
                        resource[mine] = value
                else:
                    value = getattr(mo, cobra)
                    if value:
                        resource[mine] = value
    return resource


def get_existing(moDir, name):
    uri = 'uni/infra/lacplagp-{}'
    mo = moDir.lookupByDn(uri.format(name))
    return get_attributes(KEY_MAP, mo)


def main():
    module = AnsibleModule(
        argument_spec=dict(
            name=dict(type='str', required=True),
            suspend_individual=dict(choices=['enabled', 'disabled'], default='enabled'),
            graceful_conv=dict(choices=['enabled', 'disabled'], default='enabled'),
            load_defer=dict(choices=['enabled', 'disabled'], default='disabled'),
            fast_sel_hot_stdby=dict(choices=['enabled', 'disabled'], default='enabled'),
            mode=dict(choices=['off', 'active', 'passive', 'mac-pin'], default='off'),
            max_links=dict(type='int', default=16),
            min_links=dict(type='int', default=1),
            descr=dict(type='str'),
            state=dict(choices=['present', 'absent'], default='present'),
            host=dict(required=True),
            username=dict(type='str', default='admin'),
            password=dict(type='str', default='C1sco12345'),
            protocol=dict(choices=['http', 'https'], default='https')
        ),
        supports_check_mode=True
    )
    if not HAS_COBRA:
        module.fail_json(msg='Ensure you have the ACI Cobra SDK installed',
                         error=str(ie))

    username = module.params['username']
    password = module.params['password']
    protocol = module.params['protocol']
    host = socket.gethostbyname(module.params['host'])

    state = module.params['state'].lower()

    name = module.params['name']
    suspend = module.params['suspend_individual']
    graceful = module.params['graceful_conv']
    load_defer = module.params['load_defer']
    fast = module.params['fast_sel_hot_stdby']
    mode = module.params['mode']
    max = module.params['max_links']
    if 1 > max > 16:
        module.fail_json(msg="Max_link value is outside of the valid range 1-16: {}".format(max))
    min = module.params['min_links']
    if 1 > min > 16:
        module.fail_json(msg="min_link value is outside of the valid range 1-16: {}".format(min))
    descr = module.params['descr']
    apic = '{0}://{1}/'.format(protocol, host)
    session = LoginSession(apic, username, password)
    moDir = MoDirectory(session)
    moDir.login()
    polUni = Uni('')
    infraInfra = Infra(polUni)
    existing = get_existing(moDir, name)
    args = dict(name=name, descr=descr, suspend=suspend,
                graceful=graceful, load_defer=load_defer,
                fast=fast, mode=mode, max=max, min=min)

    proposed = dict((k, v) for k, v in args.iteritems() if v is not None)

    delta = dict(set(proposed.iteritems()).difference(existing.iteritems()))
    new_mo = None
    if state == 'present':
        if delta or not existing:
            config_args = {}
            for key, value in KEY_MAP.iteritems():
                config_value = delta.get(key,existing.get(key, None))
                if config_value:
                    config_args[value] = config_value
            if 'name' in config_args.keys():
                config_args.pop('name')
            if config_args['mode'] in ['off', 'mac-pin']:
                if any([config_args['fast-sel-hot-stdby'],
                        config_args['graceful-conv'],
                        config_args['load-defer'],
                        config_args['susp-individual']]):
                    module.fail_json(msg="parameters suspend, garceful, fast-select, load-defer "+
                                         "are only supported when the LagP mode is set to active or passive")
            else:
                keys = ['fast-sel-hot-stdby', 'graceful-conv', 'load-defer', 'susp-individual']
                enabled = []
                for key in keys:
                    if config_args[key] == 'enabled':
                        enabled.append(key)
                        config_args.pop(key)
                    else:
                        config_args.pop(key)
                ctrl = ','.join(enabled)
                config_args['ctrl']= ctrl
            new_mo = LagPol(infraInfra, name=name, **config_args)
    elif state == 'absent':
        if existing:
            new_mo = LagPol(infraInfra, name=name)
            new_mo.delete()

    changed = False
    results = {}
    xmldoc = ''
    if new_mo:
        xmldoc = toXMLStr(new_mo)
        if module.check_mode:
            module.exit_json(changed=True, xmldoc=xmldoc)
        else:
            changed = True
            config_req = ConfigRequest()
            config_req.addMo(new_mo)
            moDir.commit(config_req)
            results['new'] = get_existing(moDir, name)

    results['proposed'] = proposed
    results['existing'] = existing
    results['state'] = state
    results['xmldoc'] = xmldoc
    results['changed'] = changed

    module.exit_json(**results)

from ansible.module_utils.basic import *

main()
